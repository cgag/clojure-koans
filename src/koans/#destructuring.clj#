(def test-address
  {:street-address "123 test lane"
   :city "testerville"
   :state "tx"})

(meditations
  "destructuring is an arbiter: it breaks up arguments"
  (= ":bar:foo" ((fn [[a b]] (str b a))
         [:foo :bar]))

  "whether in function definitions"
  (= (str "first comes love, "
          "then comes marriage, "
          "then comes clojure with the baby carriage")
     ((fn [[a b c]] (str "first comes " a ", " "then comes " b ", then comes " c " with the baby carriage"))
      ["love" "marriage" "clojure"]))

  "or in let expressions"
  (= "rich hickey aka the clojurer aka go time aka macro killah"
     (let [[first-name last-name & aliases]
           (list "rich" "hickey" "the clojurer" "go time" "macro killah")]
       (str first-name " " last-name " aka "
            (apply str (interpose " aka " aliases)))))

  "you can regain the full argument if you like arguing"
  (= {:Original-parts ["steven" "hawking"] :named-parts {:first "steven" :last "hawking"}}
     (let [[first-name last-name :as full-name] ["steven" "hawking"]]
       {:original-parts full-name
        :named-parts {:first first-name
                      :last  last-name}}))

  "break up maps by key"
  (= "123 test lane, testerville, tx"
     (let [{street-address :street-address, city :city, state :state} test-address]
       (apply str (interpose ", " [street-address city state]))))

  "or more succinctly"
  (= "123 test lane, testerville, tx"
     (let [{:keys [street-address city state]} test-address]
       (apply str (interpose ", " [street-address city state]))))

  "all together now!"
  (= "test testerson, 123 test lane, testerville, tx"
     ((fn [[first last]
           {:keys [street-address city state]}]
        (str first " " last ", " street-address ", " city ", " state))
      ["test" "testerson"] test-address)))
